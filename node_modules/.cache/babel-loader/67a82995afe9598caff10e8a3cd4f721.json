{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pichau\\\\Desktop\\\\netflixclone\\\\Netflix-clone\\\\src\\\\components\\\\Row.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from \"../API/axios\";\nimport \"./Row.css\";\nimport MovieModal from './MovieModal';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\n\nconst Row = ({\n  title,\n  fetchUrl,\n  isLargeRow,\n  id\n}) => {\n  const base_url = \"https://image.tmdb.org/t/p/original/\";\n  const [movies, setMovies] = useState([]);\n  const [modalVisibility, setModalVisibility] = useState(false);\n  const [movieSelected, setMovieSelection] = useState({}); //A snippet of code which runs based on a specific condition/variable\n\n  useEffect(() => {\n    //if [], run once when the row loads, and dont run again \n    async function fetchData() {\n      //Dont move until we get the API answer\n      const request = await axios.get(fetchUrl); // GET REQUEST  = \"https://api.themoviedb.org/3/fetchUrl\"\n\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n\n  const handleClick = movie => {\n    setModalVisibility(true);\n    setMovieSelection(movie);\n  };\n\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, title), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"slider\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slider__arrow-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"arrow\",\n    onClick: () => {\n      document.getElementById(id).scrollLeft -= window.innerWidth - 80;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 54\n    }\n  }, /*#__PURE__*/React.createElement(ArrowBackIosIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 157\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    id: id,\n    className: \"row__posters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, movies.map(movie => /*#__PURE__*/React.createElement(\"img\", {\n    key: movie.id,\n    onClick: () => handleClick(movie),\n    className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n    src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n    loading: \"lazy\",\n    alt: movie.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slider__arrow-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"arrow\",\n    onClick: () => {\n      document.getElementById(id).scrollLeft += window.innerWidth - 80;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 55\n    }\n  }, /*#__PURE__*/React.createElement(ArrowForwardIosIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 158\n    }\n  })))), modalVisibility && /*#__PURE__*/React.createElement(MovieModal, Object.assign({}, movieSelected, {\n    setModalVisibility: setModalVisibility,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 33\n    }\n  })));\n};\n\nexport default Row;","map":{"version":3,"sources":["C:/Users/Pichau/Desktop/netflixclone/Netflix-clone/src/components/Row.js"],"names":["React","useState","useEffect","axios","MovieModal","ArrowForwardIosIcon","ArrowBackIosIcon","Row","title","fetchUrl","isLargeRow","id","base_url","movies","setMovies","modalVisibility","setModalVisibility","movieSelected","setMovieSelection","fetchData","request","get","data","results","handleClick","movie","document","getElementById","scrollLeft","window","innerWidth","map","poster_path","backdrop_path","name"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from 'react'\r\nimport axios from \"../API/axios\";\r\nimport \"./Row.css\";\r\nimport MovieModal from './MovieModal';\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\n\r\nconst Row= ({title,fetchUrl,isLargeRow,id})=> {\r\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\r\n    const [movies, setMovies] = useState([])\r\n    const [modalVisibility,setModalVisibility] = useState(false);\r\n    const [movieSelected, setMovieSelection] = useState({});\r\n\r\n    //A snippet of code which runs based on a specific condition/variable\r\n    useEffect(()=>{\r\n\r\n        //if [], run once when the row loads, and dont run again \r\n\r\n        async function fetchData(){\r\n            //Dont move until we get the API answer\r\n            const request = await axios.get(fetchUrl);\r\n            // GET REQUEST  = \"https://api.themoviedb.org/3/fetchUrl\"\r\n            setMovies(request.data.results)\r\n            return request;\r\n        }\r\n\r\n        fetchData();\r\n\r\n    }, [fetchUrl]);\r\n\r\n    const handleClick = (movie) =>{\r\n        setModalVisibility(true);\r\n        setMovieSelection(movie);\r\n\r\n    }\r\n    return (\r\n        <section className=\"row\">\r\n            {/** TITLE */}\r\n            <h2>{title}</h2>\r\n            <div class=\"slider\">\r\n     \r\n                <div className=\"slider__arrow-left\" ><span className=\"arrow\" onClick={()=>{document.getElementById(id).scrollLeft-=(window.innerWidth-80)}}><ArrowBackIosIcon/></span></div>\r\n                <div id={id} className=\"row__posters\">\r\n                    {/**SEVERAL ROW__POSTER */}\r\n                    {movies.map(movie=>(\r\n                        <img\r\n                            key={movie.id}\r\n                            onClick={() => handleClick(movie)}\r\n                            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`} \r\n                            src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \r\n                            loading=\"lazy\"\r\n                            alt={movie.name}/>\r\n                    ))}\r\n                    \r\n                </div>\r\n                <div className=\"slider__arrow-right\" ><span className=\"arrow\" onClick={()=>{document.getElementById(id).scrollLeft+=(window.innerWidth-80)}}><ArrowForwardIosIcon/></span></div>\r\n            </div>\r\n            {modalVisibility && <MovieModal {...movieSelected} setModalVisibility={setModalVisibility}/>}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Row\r\n"]},"metadata":{},"sourceType":"module"}